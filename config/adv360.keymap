#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 37 52 65 66 67>;
            quick-tap-ms = <200>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            quick-tap-ms = <500>;
            hold-trigger-key-positions = <52 53 65 66 67 68 69 70 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 60 61 62 63 64 65 66 38>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
        };
    };

    macros {
        easy_mot: easy_mot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp NON_US_BACKSLASH &kp NON_US_BACKSLASH>;

            label = "EASY_MOTION";
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <48 49>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <49 50>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <47 48>;
        };

        vimmotion {
            bindings = <&easy_mot>;
            key-positions = <65 70>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&ht TILDE GRAVE  &ht EXCLAMATION NUMBER_1  &ht AT_SIGN NUMBER_2  &ht HASH NUMBER_3    &ht DOLLAR NUMBER_4  &ht PERCENT N5    &tog 2                                                                      &kp F12         &ht CARET NUMBER_6  &ht AMPERSAND N7    &ht ASTERISK N8              &ht LEFT_PARENTHESIS N9        &ht RIGHT_PARENTHESIS N0   &ht UNDERSCORE MINUS
&kp TAB          &kp Q                     &kp W                 &kp E                &kp R                &kp T             &none                                                                       &none           &kp Y               &kp U               &kp I                        &kp O                          &kp P                      &ht LEFT_BRACE LEFT_BRACKET
&lt 1 ESC        &hml LEFT_WIN A           &hml LEFT_ALT S       &hml LEFT_CONTROL D  &hml LEFT_SHIFT F    &hml RIGHT_ALT G  &ht UNDERSCORE MINUS  &kp LCTRL      &kp LALT      &kp LEFT_ALT  &kp RCTRL  &ht PLUS EQUAL  &hmr RIGHT_ALT H    &hmr RIGHT_SHIFT J  &hmr LEFT_CONTROL K          &hmr LEFT_ALT L                &ht COLON SEMICOLON        &ht DOUBLE_QUOTES SQT
&kp LSHFT        &kp Z                     &kp X                 &kp C                &kp V                &kp B                                                  &kp HOME      &kp PAGE_UP                              &kp N               &kp M               &ht LESS_THAN COMMA          &ht GREATER_THAN PERIOD        &ht QUESTION SLASH         &kp RSHFT
&tog 1           &kp LEFT_WIN              &caps_word            &kp LEFT             &kp RIGHT                              &lt 2 SPACE           &kp BACKSPACE  &kp END       &kp PG_DN     &kp ENTER  &lt 1 SPACE                         &kp RIGHT_ALT       &ht LEFT_BRACE LEFT_BRACKET  &ht RIGHT_BRACE RIGHT_BRACKET  &ht PIPE NON_US_BACKSLASH  &mo 3
            >;
        };

        fn {
            bindings = <
&trans  &kp F1              &kp F2              &kp F3              &kp F4              &kp F5  &trans                                                     &trans  &kp F6                      &kp F7                      &kp F8                    &kp F9                       &kp F10                &kp F11
&trans  &kp PRINTSCREEN     &kp LG(LS(GRAVE))   &kp LG(E)           &trans              &trans  &none                                                      &none   &kp HOME                    &kp LC(HOME)                &kp LC(END)               &kp END                      &trans                 &trans
&trans  &trans              &trans              &trans              &trans              &trans  &none       &trans             &trans      &trans  &trans  &none   &kp LEFT_ARROW              &kp DOWN_ARROW              &kp UP_ARROW              &kp RIGHT_ARROW              &kp LC(LEFT_ARROW)     &kp LC(RIGHT_ARROW)
&trans  &trans              &trans              &trans              &trans              &trans                                 &trans      &trans                  &kp LS(LC(LA(LEFT_ARROW)))  &kp LS(LA(LC(DOWN_ARROW)))  &kp LS(LC(LA(UP_ARROW)))  &kp LS(LC(LA(RIGHT_ARROW)))  &trans                 &trans
&trans  &kp LS(LC(LA(F1)))  &kp LS(LA(LC(F2)))  &kp LC(LS(LA(F3)))  &kp LA(LS(LC(F4)))          &kp DELETE  &kp LC(BACKSPACE)  &trans      &trans  &trans  &trans                              &kp LEFT_PARENTHESIS        &kp LBRC                  &kp RBRC                     &kp RIGHT_PARENTHESIS  &trans
            >;
        };

        keypad {
            bindings = <
&trans        &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans                                      &trans  &trans  &kp KP_CLEAR  &kp ASTERISK  &kp SLASH     &kp MINUS     &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp N7        &kp N8        &kp N9        &kp MINUS     &trans
&kp CAPSLOCK  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS      &kp EQUAL
&trans        &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_ENTER  &trans
&tog 2        &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &kp N0        &kp N0        &kp KP_DOT    &kp KP_ENTER  &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2        &bt BT_SEL 3        &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none               &none               &none               &none               &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none               &none               &none               &none               &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none               &none               &none               &macro_ver          &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &kp LS(LA(LC(F1)))  &kp LS(LA(LC(F2)))  &kp LS(LC(LA(F3)))  &kp LS(LA(LC(F4)))                &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &trans
            >;
        };
    };
};
